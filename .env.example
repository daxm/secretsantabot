# Flask Configuration
# SECURITY WARNING: Generate a strong random secret key for production!
# Generate one using: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-secret-key-here-change-this

# Admin Password Configuration
# IMPORTANT: This must be a bcrypt password hash, NOT plain text!
# To generate a password hash, run:
#   python dev-tools/generate_password_hash.py
# The script will automatically escape $ signs for Docker ($ becomes $$)
# Copy the "with $$ escaped" version if using Docker Compose
ADMIN_PASSWORD_HASH=

# Optional: Database Configuration
# DATABASE_URL=sqlite:////app/data/secretsanta.db

# Optional: Session Security (set to True when using HTTPS)
# SESSION_COOKIE_SECURE=True

# Email Configuration (for sending Secret Santa notifications)
# Office 365 SMTP Settings:
# - Server: smtp.office365.com
# - Port: 587 (TLS/STARTTLS encryption - automatically handled by the app)
# - Authentication: Required (automatically handled by the app using credentials below)
SMTP_SERVER=smtp.office365.com
SMTP_PORT=587
SMTP_USERNAME=your-email@yourdomain.com
SMTP_PASSWORD=your-office365-password

# Important Setup Steps for Office 365:
# 1. Ensure SMTP AUTH is enabled in Microsoft 365 admin center:
#    Go to: Users > Active users > Select user > Mail > Manage email apps > Check "Authenticated SMTP"
# 2. Use your full Office 365 email address as SMTP_USERNAME
# 3. Microsoft is phasing out basic authentication by September 2025
#    You may need to use OAuth 2.0 or app-specific passwords depending on your organization's settings

# SECURITY NOTES:
# - NEVER commit the .env file to version control (.gitignore should exclude it)
# - Use strong, unique passwords for admin access
# - Enable HTTPS in production and set SESSION_COOKIE_SECURE=True
# - Regularly rotate credentials
# - Keep dependencies up to date with security patches
